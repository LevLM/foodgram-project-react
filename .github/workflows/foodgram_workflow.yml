name: Django-app workflow

on:
  push:
    branches:
      - master

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        cd backend/foodgram/
        pip install -r requirements.txt 

    - name: Test with flake8
      run: |
        python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1 
      - name: Login to Docker 
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram
          context: ./backend/foodgram

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          # port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            cd foodgram_infra
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram
            sudo docker compose stop
            sudo docker compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker compose up -d


          # script: |
          #   cd foodgram_infra
          #   sudo docker-compose down
          #   echo DB_ENGINE=${{ secrets.DB_ENGINE }} > .env
          #   echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          #   echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          #   echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          #   echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          #   echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          #   echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> .env
          #   echo DEBUG=${{ secrets.DEBUG }} >> .env
          #   echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" >> .env
          #   echo USE_SQLITE=${{ secrets.USE_SQLITE }} >> .env
          #   sudo docker image rm ${{ secrets.DOCKER_USERNAME }}/foodgram
          #   sudo docker pull ${{ secrets.DOCKER_USERNAME }}/foodgram
          #   sudo docker-compose up -d
